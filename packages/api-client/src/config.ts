import axios, { AxiosInstance, AxiosError, InternalAxiosRequestConfig } from 'axios';
import { ApiError, ApiErrorResponse } from './types/auth';

// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π instance —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—É–∫–∏
const instance: AxiosInstance = axios.create({
  baseURL: process.env.API_BASE_URL || 'http://localhost:1488/api/v1',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
    'X-Client': 'web-app'
  },
  // –ö–†–ò–¢–ò–ß–ù–û: –≤–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫—É–∫–∏
  withCredentials: true,
});

// Request interceptor (—É–±–∏—Ä–∞–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É —Å —Ç–æ–∫–µ–Ω–∞–º–∏)
instance.interceptors.request.use(
  (config: InternalAxiosRequestConfig) => {
    // –î–æ–±–∞–≤–ª—è–µ–º CSRF protection –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (process.env.CSRF_TOKEN) {
      config.headers['X-CSRF-Token'] = process.env.CSRF_TOKEN;
    }

    console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`);
    return config;
  },
  (error) => {
    console.error('‚ùå Request Error:', error);
    return Promise.reject(error);
  }
);

// Response interceptor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
instance.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);
    return response;
  },
  async (error: AxiosError<ApiErrorResponse>) => {
    const status = error.response?.status;

    console.error(`‚ùå API Error: ${status} ${error.config?.url}`, error.response?.data);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ 401 - —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    if (status === 401) {
      console.log('üîÑ Trying to refresh token...');

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        await instance.post('/auth/refresh-token');
        console.log('‚úÖ Token refreshed successfully');

        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if (error.config) {
          return instance.request(error.config);
        }
      } catch (refreshError) {
        console.error('‚ùå Token refresh failed:', refreshError);

        // –ï—Å–ª–∏ refresh –Ω–µ —É–¥–∞–ª—Å—è - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
        if (typeof window !== 'undefined') {
          window.location.href = '/login';
        }
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—à–∏–±–∫—É –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    const apiError: ApiError = {
      message: error.response?.data?.message || error.message || 'Unknown error',
      statusCode: status || 500,
      error: error.response?.data?.error
    };

    return Promise.reject(apiError);
  }
);

export default instance;
