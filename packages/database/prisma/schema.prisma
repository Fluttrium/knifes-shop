generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  firstName String? @map("first_name")
  lastName  String? @map("last_name")
  password  String? // Nullable для OAuth пользователей
  phone     String?
  avatar    String?

  // Статусы и флаги
  status           UserStatus @default(ACTIVE)
  emailVerified    Boolean    @default(false) @map("email_verified")
  twoFactorEnabled Boolean    @default(false) @map("two_factor_enabled")

  // Временные метки
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  lastLoginAt DateTime? @map("last_login_at")

  // Связи для Auth модуля
  sessions           UserSession[]
  socialAccounts     SocialAccount[]
  passwordResets     PasswordResetToken[]
  emailVerifications EmailVerificationToken[]
  loginAttempts      LoginAttempt[]

  @@index([email])
  @@index([status])
  @@map("users")
}

// Enum для статуса пользователя
enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  PENDING_VERIFICATION
}

// Сессии пользователей
model UserSession {
  id           String  @id @default(cuid())
  userId       String  @map("user_id")
  refreshToken String  @unique @map("refresh_token")
  deviceInfo   String? @map("device_info")
  ipAddress    String  @map("ip_address")
  userAgent    String? @map("user_agent")

  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  lastUsedAt DateTime @default(now()) @map("last_used_at")

  // Связи
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([refreshToken])
  @@index([expiresAt])
  @@map("user_sessions")
}

// Социальные аккаунты (OAuth)
model SocialAccount {
  id             String         @id @default(cuid())
  userId         String         @map("user_id")
  provider       SocialProvider
  providerUserId String         @map("provider_user_id")
  email          String?
  profileData    Json?          @map("profile_data")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Связи
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@index([userId])
  @@map("social_accounts")
}

// Enum для социальных провайдеров
enum SocialProvider {
  VK
  YANDEX
}

// Токены для сброса пароля
model PasswordResetToken {
  id     String  @id @default(cuid())
  userId String  @map("user_id")
  token  String  @unique
  used   Boolean @default(false)

  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  usedAt    DateTime? @map("used_at")

  // Связи
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

// Токены для подтверждения email
model EmailVerificationToken {
  id     String  @id @default(cuid())
  userId String  @map("user_id")
  token  String  @unique
  used   Boolean @default(false)

  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  usedAt    DateTime? @map("used_at")

  // Связи
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

// Попытки входа (для безопасности и аналитики)
model LoginAttempt {
  id            String  @id @default(cuid())
  userId        String? @map("user_id")
  email         String
  ipAddress     String  @map("ip_address")
  userAgent     String? @map("user_agent")
  success       Boolean
  failureReason String? @map("failure_reason")

  createdAt DateTime @default(now()) @map("created_at")

  // Связи
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([email])
  @@index([ipAddress])
  @@index([success])
  @@index([createdAt])
  @@map("login_attempts")
}

// Черный список токенов (для отозванных JWT)
model BlacklistedToken {
  id     String  @id @default(cuid())
  token  String  @unique
  reason String?

  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([token])
  @@index([expiresAt])
  @@map("blacklisted_tokens")
}
