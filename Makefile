.PHONY: help install build test lint type-check clean docker-build docker-up docker-down docker-logs deploy

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DOCKER_COMPOSE = docker-compose
DOCKER_COMPOSE_PROD = docker-compose -f docker-compose.prod.yml

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	npm ci

build: ## –°–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —Å Turbo
	npx turbo run build

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	npx turbo run test

lint: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–∏–Ω—Ç–µ—Ä
	npx turbo run lint

type-check: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã
	npx turbo run type-check

check: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
	npx turbo run type-check
	npx turbo run lint
	npx turbo run test

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∏ build —Ñ–∞–π–ª—ã
	npx turbo run clean
	rm -rf node_modules
	rm -rf apps/*/dist
	rm -rf apps/*/.next
	rm -rf packages/*/dist

docker-build: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑—ã
	$(DOCKER_COMPOSE) build

docker-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	$(DOCKER_COMPOSE) up -d

docker-down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	$(DOCKER_COMPOSE) down

docker-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	$(DOCKER_COMPOSE) logs -f

docker-dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ä–µ–¥—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	./scripts/docker-dev.sh

docker-prod-build: ## –°–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω –æ–±—Ä–∞–∑—ã
	$(DOCKER_COMPOSE_PROD) build

docker-prod-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	$(DOCKER_COMPOSE_PROD) up -d

docker-prod-down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∫—à–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	$(DOCKER_COMPOSE_PROD) down

docker-prod-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	$(DOCKER_COMPOSE_PROD) logs -f

deploy: ## –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
	./scripts/deploy.sh

setup: ## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "üîß Setting up project..."
	npm ci
	npx turbo run build
	@echo "‚úÖ Setup completed!"

dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "üöÄ Starting development mode..."
	npx turbo run dev

format: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	npx turbo run format

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–æ—Ä–µ–ø—ã
api-dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ API –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	npx turbo run dev --filter=api

web-dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ Web –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	npx turbo run dev --filter=web

api-build: ## –°–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ API
	npx turbo run build --filter=api

web-build: ## –°–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ Web
	npx turbo run build --filter=web

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ Docker
docker-clean: ## –û—á–∏—Å—Ç–∏—Ç—å Docker –∫—ç—à –∏ –æ–±—Ä–∞–∑—ã
	docker system prune -f
	docker image prune -f
	docker volume prune -f

docker-clean-all: ## –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ Docker
	docker system prune -a -f
	docker volume prune -f
	docker network prune -f
