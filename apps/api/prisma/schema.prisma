generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  emailVerified DateTime?
  password      String
  role          Role           @default(user)
  image         String?
  phone         String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  addresses     Address[]
  cartItems     CartItem[]
  orders        Order[]
  payments      Payment[]
  reviews       Review[]
  wishlistItems WishlistItem[]

  @@map("users")
}

model Address {
  id         String   @id @default(uuid())
  userId     String
  type       String   @default("shipping")
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]

  @@map("addresses")
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  slug        String     @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Product {
  id               String           @id @default(uuid())
  name             String
  slug             String           @unique
  description      String?
  shortDescription String?
  brand            String?
  sku              String           @unique
  price            Decimal          @db.Decimal(10, 2)
  comparePrice     Decimal?         @db.Decimal(10, 2)
  costPrice        Decimal?         @db.Decimal(10, 2)
  weight           Decimal?         @db.Decimal(8, 3)
  dimensions       String?
  stockQuantity    Int              @default(0)
  minStockLevel    Int              @default(5)
  maxStockLevel    Int?
  productType      ProductType
  material         Material?
  handleType       HandleType?
  bladeLength      Decimal?         @db.Decimal(5, 2)
  totalLength      Decimal?         @db.Decimal(5, 2)
  bladeHardness    Int?
  isActive         Boolean          @default(true)
  isFeatured       Boolean          @default(false)
  isNew            Boolean          @default(false)
  isOnSale         Boolean          @default(false)
  sortOrder        Int              @default(0)
  metaTitle        String?
  metaDescription  String?
  categoryId       String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  cartItems        CartItem[]
  orderItems       OrderItem[]
  images           ProductImage[]
  variants         ProductVariant[]
  category         Category         @relation(fields: [categoryId], references: [id])
  reviews          Review[]
  wishlistItems    WishlistItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id            String      @id @default(uuid())
  productId     String
  name          String
  sku           String      @unique
  price         Decimal?    @db.Decimal(10, 2)
  stockQuantity Int         @default(0)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model CartItem {
  id        String          @id @default(uuid())
  userId    String
  productId String
  variantId String?
  quantity  Int             @default(1)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id                String         @id @default(uuid())
  orderNumber       String         @unique
  userId            String
  status            OrderStatus    @default(pending)
  paymentStatus     PaymentStatus  @default(pending)
  paymentMethod     PaymentMethod?
  subtotal          Decimal        @db.Decimal(10, 2)
  taxAmount         Decimal        @default(0) @db.Decimal(10, 2)
  shippingAmount    Decimal        @default(0) @db.Decimal(10, 2)
  discountAmount    Decimal        @default(0) @db.Decimal(10, 2)
  totalAmount       Decimal        @db.Decimal(10, 2)
  currency          String         @default("USD")
  notes             String?
  trackingNumber    String?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  shippingAddressId String
  items             OrderItem[]
  shippingAddress   Address        @relation(fields: [shippingAddressId], references: [id])
  user              User           @relation(fields: [userId], references: [id])
  parcels           Parcel[]
  payments          Payment[]

  @@map("orders")
}

model OrderItem {
  id          String          @id @default(uuid())
  orderId     String
  productId   String
  variantId   String?
  productName String
  productSku  String
  quantity    Int
  unitPrice   Decimal         @db.Decimal(10, 2)
  totalPrice  Decimal         @db.Decimal(10, 2)
  createdAt   DateTime        @default(now())
  order       Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product         @relation(fields: [productId], references: [id])
  variant     ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Coupon {
  id              String    @id @default(uuid())
  code            String    @unique
  name            String
  description     String?
  discountType    String
  discountValue   Decimal   @db.Decimal(10, 2)
  minimumAmount   Decimal?  @db.Decimal(10, 2)
  maximumDiscount Decimal?  @db.Decimal(10, 2)
  usageLimit      Int?
  usedCount       Int       @default(0)
  isActive        Boolean   @default(true)
  startsAt        DateTime?
  expiresAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("coupons")
}

model ShippingMethod {
  id                    String   @id @default(uuid())
  name                  String
  description           String?
  price                 Decimal  @db.Decimal(10, 2)
  freeShippingThreshold Decimal? @db.Decimal(10, 2)
  estimatedDays         String?
  isActive              Boolean  @default(true)
  sortOrder             Int      @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("shipping_methods")
}

model TaxRate {
  id         String   @id @default(uuid())
  name       String
  rate       Decimal  @db.Decimal(5, 4)
  country    String?
  state      String?
  postalCode String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("tax_rates")
}

model Payment {
  id         String         @id @default(uuid())
  orderId    String
  userId     String
  status     PaymentStatus  @default(pending)
  method     PaymentMethod?
  amount     Decimal        @db.Decimal(10, 2)
  currency   String         @default("RUB")
  externalId String?
  comment    String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  order      Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Parcel {
  id             String       @id @default(uuid())
  orderId        String
  status         ParcelStatus @default(created)
  trackingNumber String?
  carrier        String?
  shippedAt      DateTime?
  deliveredAt    DateTime?
  comment        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  order          Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("parcels")
}

enum Role {
  admin
  user
}

enum OrderStatus {
  pending
  confirmed
  processing
  shipped
  delivered
  cancelled
  refunded
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

enum PaymentMethod {
  card
  cash
  bank_transfer
}

enum ProductType {
  knife
  sharpener
  sheath
  accessory
  gift_set
}

enum Material {
  stainless_steel
  carbon_steel
  damascus_steel
  ceramic
  titanium
  wood
  plastic
  leather
  synthetic
}

enum HandleType {
  fixed
  folding
  multi_tool
}

enum ParcelStatus {
  created
  ready
  shipped
  delivered
  cancelled
  returned
}
