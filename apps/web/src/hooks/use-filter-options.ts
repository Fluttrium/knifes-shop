import { useState, useEffect } from 'react';
import api from '@repo/api-client';

interface FilterOption {
  text: string;
  value: string;
  count?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å —ç—Ç–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
}

interface FilterOptions {
  brands: FilterOption[];
  materials: FilterOption[];
  productTypes: FilterOption[];
  handleTypes: FilterOption[];
}

export const useFilterOptions = () => {
  const [filterOptions, setFilterOptions] = useState<FilterOptions>({
    brands: [],
    materials: [],
    productTypes: [],
    handleTypes: []
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchFilterOptions = async () => {
      try {
        setLoading(true);
        setError(null);

        console.log('üîç Fetching filter options from API...');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const response = await api.products.getProducts({ limit: 1000 });
        const products = response.products;

        console.log(`üìä Analyzing ${products.length} products for filter options...`);

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±—Ä–µ–Ω–¥—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        const brandCounts = new Map<string, number>();
        products.forEach(product => {
          if (product.brand) {
            brandCounts.set(product.brand, (brandCounts.get(product.brand) || 0) + 1);
          }
        });

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        const materialCounts = new Map<string, number>();
        products.forEach(product => {
          if (product.material) {
            materialCounts.set(product.material, (materialCounts.get(product.material) || 0) + 1);
          }
        });

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
        const productTypeCounts = new Map<string, number>();
        products.forEach(product => {
          productTypeCounts.set(product.productType, (productTypeCounts.get(product.productType) || 0) + 1);
        });

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã —Ä—É–∫–æ—è—Ç–æ–∫
        const handleTypeCounts = new Map<string, number>();
        products.forEach(product => {
          if (product.handleType) {
            handleTypeCounts.set(product.handleType, (handleTypeCounts.get(product.handleType) || 0) + 1);
          }
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        const brands = Array.from(brandCounts.entries())
          .map(([value, count]) => ({
            text: value,
            value,
            count
          }))
          .sort((a, b) => b.count - a.count);

        const materials = Array.from(materialCounts.entries())
          .map(([value, count]) => ({
            text: getMaterialDisplayName(value),
            value,
            count
          }))
          .sort((a, b) => b.count - a.count);

        const productTypes = Array.from(productTypeCounts.entries())
          .map(([value, count]) => ({
            text: getProductTypeDisplayName(value),
            value,
            count
          }))
          .sort((a, b) => b.count - a.count);

        const handleTypes = Array.from(handleTypeCounts.entries())
          .map(([value, count]) => ({
            text: getHandleTypeDisplayName(value),
            value,
            count
          }))
          .sort((a, b) => b.count - a.count);

        setFilterOptions({
          brands,
          materials,
          productTypes,
          handleTypes
        });

        console.log('‚úÖ Filter options loaded:', {
          brands: brands.length,
          materials: materials.length,
          productTypes: productTypes.length,
          handleTypes: handleTypes.length
        });

      } catch (err) {
        console.error('‚ùå Error fetching filter options:', err);
        setError(err instanceof Error ? err.message : 'Failed to load filter options');
      } finally {
        setLoading(false);
      }
    };

    fetchFilterOptions();
  }, []);

  return {
    filterOptions,
    loading,
    error,
    refetch: () => {
      setLoading(true);
      setError(null);
      // useEffect –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    }
  };
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è enum –∑–Ω–∞—á–µ–Ω–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
function getMaterialDisplayName(material: string): string {
  const materialNames: Record<string, string> = {
    stainless_steel: '–ù–µ—Ä–∂–∞–≤–µ—é—â–∞—è —Å—Ç–∞–ª—å',
    carbon_steel: '–£–≥–ª–µ—Ä–æ–¥–∏—Å—Ç–∞—è —Å—Ç–∞–ª—å',
    damascus_steel: '–î–∞–º–∞—Å—Å–∫–∞—è —Å—Ç–∞–ª—å',
    ceramic: '–ö–µ—Ä–∞–º–∏–∫–∞',
    titanium: '–¢–∏—Ç–∞–Ω',
    wood: '–î–µ—Ä–µ–≤–æ',
    plastic: '–ü–ª–∞—Å—Ç–∏–∫',
    leather: '–ö–æ–∂–∞',
    synthetic: '–°–∏–Ω—Ç–µ—Ç–∏–∫–∞'
  };
  return materialNames[material] || material;
}

function getProductTypeDisplayName(type: string): string {
  const typeNames: Record<string, string> = {
    knife: '–ù–æ–∂–∏',
    sharpener: '–¢–æ—á–∏–ª–∫–∏',
    sheath: '–ù–æ–∂–Ω—ã',
    accessory: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã',
    gift_set: '–ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –Ω–∞–±–æ—Ä—ã'
  };
  return typeNames[type] || type;
}

function getHandleTypeDisplayName(type: string): string {
  const typeNames: Record<string, string> = {
    fixed: '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
    folding: '–°–∫–ª–∞–¥–Ω—ã–µ',
    multi_tool: '–ú—É–ª—å—Ç–∏—Ç—É–ª'
  };
  return typeNames[type] || type;
}