"use client";
import { Container } from "@/components/shared/container";
import { Title } from "@/components/shared/title";
import { ProductsGroupList } from "@/components/shared/products-group-list";
import { TopBar } from "@/components/shared/top-bar";
import { Stories } from "@/components/shared/stories";
import { Filters } from "@/components/shared/filters";
import { SortPopup } from "@/components/shared/sort-popup";
import { useSearchParams, useRouter } from 'next/navigation';
import { useKnifeFilters } from '@/hooks/use-knife-filters';
import { useQueryFilters } from '@/hooks/use-query-filters';
import api, { Category } from '@repo/api-client';
import { Suspense, useEffect, useState } from "react";

interface CategoryWithProducts extends Category {
  products: any[];
  productsCount: number;
}

function ShopContent() {
  const [categories, setCategories] = useState<CategoryWithProducts[]>([]);
  const [loading, setLoading] = useState(true);
  const searchParamsHook = useSearchParams();
  const router = useRouter();
  const [urlParams, setUrlParams] = useState('');

  const filters = useKnifeFilters();
  useQueryFilters(filters);

  // –¢–µ–∫—É—â–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const currentSort = searchParamsHook.get('sortBy') || 'popular';

  useEffect(() => {
    const currentParams = searchParamsHook.toString();
    console.log('üåê URL changed:', window.location.href);
    console.log('üåê searchParams toString:', currentParams);
    setUrlParams(currentParams);
  }, [searchParamsHook.toString()]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const getSortParams = (sortValue: string) => {
    switch (sortValue) {
      case 'popular':
        return { sortBy: 'sortOrder', sortOrder: 'asc' as const };
      case 'price_asc':
        return { sortBy: 'price', sortOrder: 'asc' as const };
      case 'price_desc':
        return { sortBy: 'price', sortOrder: 'desc' as const };
      case 'name':
        return { sortBy: 'name', sortOrder: 'asc' as const };
      case 'newest':
        return { sortBy: 'createdAt', sortOrder: 'desc' as const };
      default:
        return { sortBy: 'sortOrder', sortOrder: 'asc' as const };
    }
  };

  // –û–°–ù–û–í–ù–û–ô useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  useEffect(() => {
    let timeoutId: NodeJS.Timeout;

    const loadProductsByCategories = async () => {
      try {
        setLoading(true);
        console.log('üî• Main page useEffect triggered! urlParams:', urlParams);
        console.log('üî• Current window.location.search:', window.location.search);

        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        const sortParams = getSortParams(currentSort);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const filterParams = {
          priceFrom: searchParamsHook.get('priceFrom') ? Number(searchParamsHook.get('priceFrom')) : undefined,
          priceTo: searchParamsHook.get('priceTo') ? Number(searchParamsHook.get('priceTo')) : undefined,
          brands: searchParamsHook.get('brands') || undefined,
          materials: searchParamsHook.get('materials') || undefined,
          productTypes: searchParamsHook.get('productTypes') || undefined,
          handleTypes: searchParamsHook.get('handleTypes') || undefined,
          ...sortParams,
        };

        console.log('üîÑ Applying filters:', filterParams);

        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoriesData = await api.products.getCategories();

        // –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        const categoriesWithProducts = await Promise.all(
          categoriesData.map(async (category) => {
            try {
              // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
              const queryParams: Record<string, any> = {
                categoryId: category.id,
                limit: 20,
                ...filterParams
              };

              // –£–±–∏—Ä–∞–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è
              const cleanParams = Object.fromEntries(
                Object.entries(queryParams).filter(([_, value]) => value !== undefined)
              );

              console.log(`üìä Query params for ${category.name}:`, cleanParams);

              const response = await api.products.getProducts(cleanParams);

              return {
                ...category,
                products: response.products,
                productsCount: response.products.length
              };
            } catch (error) {
              console.error(`‚ùå Error fetching products for category ${category.id}:`, error);
              return {
                ...category,
                products: [],
                productsCount: 0
              };
            }
          })
        );

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        const filteredCategories = categoriesWithProducts.filter(cat => cat.productsCount > 0);

        console.log('üì¶ Filtered results:', filteredCategories.map(cat => ({
          name: cat.name,
          productsCount: cat.productsCount
        })));

        setCategories(filteredCategories);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", error);
        setCategories([]);
      } finally {
        setLoading(false);
      }
    };

    timeoutId = setTimeout(loadProductsByCategories, 50);
    return () => clearTimeout(timeoutId);
  }, [
    searchParamsHook.get('priceFrom'),
    searchParamsHook.get('priceTo'),
    searchParamsHook.get('brands'),
    searchParamsHook.get('materials'),
    searchParamsHook.get('productTypes'),
    searchParamsHook.get('handleTypes'),
    searchParamsHook.get('sortBy'),
    urlParams,
    currentSort
  ]);

  const totalProducts = categories.reduce((acc, cat) => acc + (cat.productsCount || 0), 0);
  const hasActiveFilters = filters.brands.size > 0 || filters.materials.size > 0 ||
    filters.productTypes.size > 0 || filters.handleTypes.size > 0 ||
    filters.prices.priceFrom || filters.prices.priceTo;

  if (loading) {
    return (
      <Container className="mt-10">
        <div className="text-center">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞...</div>
      </Container>
    );
  }

  return (
    <>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Container className="mt-10 pl-4 md:pl-0">
        <Title text="–ú–∞–≥–∞–∑–∏–Ω –Ω–æ–∂–µ–π" size="lg" className="font-extrabold" />
        <p className="text-gray-600 mt-2">
          –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–æ–∂–∏ –¥–ª—è –∫—É—Ö–Ω–∏, –æ—Ö–æ—Ç—ã –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        </p>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ */}
        {hasActiveFilters && (
          <div className="mt-4 p-4 bg-blue-50 rounded-lg">
            <p className="text-sm text-blue-800">
              –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: –Ω–∞–π–¥–µ–Ω–æ {totalProducts} —Ç–æ–≤–∞—Ä{totalProducts === 1 ? '' : totalProducts > 4 ? '–æ–≤' : '–∞'}
            </p>
          </div>
        )}
      </Container>

      {/* TopBar —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ */}
      <Container className="mt-4 sticky top-0 bg-white z-10 shadow-md">
        <div className="overflow-x-auto pl-4 md:pl-0">
          {loading ? (
            <div className="h-12 bg-gray-100 animate-pulse rounded-lg" />
          ) : (
            <TopBar categories={categories.filter(c => c.productsCount > 0)} />
          )}
        </div>
      </Container>

      {/* Stories */}
      <Container className="mt-10">
        <div className="overflow-x-auto pl-4 md:pl-0">
          <Stories />
        </div>
      </Container>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <Container className="mt-10 pb-14">
        <div className="flex flex-col lg:flex-row gap-6 lg:gap-[80px]">
          {/* –§–∏–ª—å—Ç—Ä—ã */}
          <div className="lg:w-[250px] hidden lg:block">
            <Suspense fallback={<div>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤‚Ä¶</div>}>
              <Filters />
            </Suspense>
          </div>

          {/* –¢–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º */}
          <div className="flex-1 pl-4 lg:pl-8">
            {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
            <div className="flex justify-between items-center mb-6">
              <Title text={`–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`} size="sm" />
              <SortPopup />
            </div>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
            {categories.length === 0 && hasActiveFilters ? (
              <div className="text-center py-12">
                <h3 className="text-xl font-semibold text-gray-600 mb-2">
                  –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                </h3>
                <p className="text-gray-500">
                  –ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
                </p>
              </div>
            ) : (
              <div className="flex flex-col gap-8 sm:gap-16">
                {categories.map((category) => {
                  const hasProducts = category.products && category.products.length > 0;
                  return hasProducts ? (
                    <ProductsGroupList
                      key={category.id}
                      title={category.name}
                      categoryId={category.id}
                      items={category.products}
                    />
                  ) : null;
                })}
              </div>
            )}
          </div>
        </div>
      </Container>
    </>
  );
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å Suspense
export default function Home() {
  return (
    <Suspense fallback={
      <Container className="mt-10">
        <div className="text-center">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...</div>
      </Container>
    }>
      <ShopContent />
    </Suspense>
  );
}