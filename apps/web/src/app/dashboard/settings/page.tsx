"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { 
  Store, 
  Mail, 
  Phone, 
  MapPin, 
  Globe, 
  CreditCard, 
  Truck, 
  Shield,
  Save,
  Settings as SettingsIcon,
  ShoppingCart
} from "lucide-react";

interface StoreSettings {
  // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  storeName: string;
  storeDescription: string;
  storeEmail: string;
  storePhone: string;
  storeAddress: string;
  storeWebsite: string;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫–∞–∑–æ–≤
  allowGuestCheckout: boolean;
  requireEmailConfirmation: boolean;
  autoConfirmOrders: boolean;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
  defaultCurrency: string;
  taxRate: number;
  freeShippingThreshold: number;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  defaultShippingMethod: string;
  allowPickup: boolean;
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  requireStrongPasswords: boolean;
  enableTwoFactorAuth: boolean;
  sessionTimeout: number;
}

export default function SettingsPage() {
  const [settings, setSettings] = useState<StoreSettings>({
    storeName: "–ú–æ–π –º–∞–≥–∞–∑–∏–Ω –Ω–æ–∂–µ–π",
    storeDescription: "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–æ–∂–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –∏ –ª—é–±–∏—Ç–µ–ª–µ–π",
    storeEmail: "info@knifeshop.ru",
    storePhone: "+7 (999) 123-45-67",
    storeAddress: "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1",
    storeWebsite: "https://knifeshop.ru",
    allowGuestCheckout: true,
    requireEmailConfirmation: false,
    autoConfirmOrders: false,
    defaultCurrency: "RUB",
    taxRate: 20,
    freeShippingThreshold: 5000,
    defaultShippingMethod: "courier",
    allowPickup: true,
    requireStrongPasswords: true,
    enableTwoFactorAuth: false,
    sessionTimeout: 30
  });

  const [loading, setLoading] = useState(false);
  const [saved, setSaved] = useState(false);

  const handleSave = async () => {
    setLoading(true);
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
      console.log("üíæ Saving settings:", settings);
      await new Promise(resolve => setTimeout(resolve, 1000)); // –ò–º–∏—Ç–∞—Ü–∏—è API
      setSaved(true);
      setTimeout(() => setSaved(false), 3000);
    } catch (error) {
      console.error("‚ùå Error saving settings:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞</h1>
          <p className="text-muted-foreground">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞
          </p>
        </div>
        <Button onClick={handleSave} disabled={loading}>
          <Save className="mr-2 h-4 w-4" />
          {loading ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}
        </Button>
      </div>

      {saved && (
        <div className="p-4 bg-green-50 border border-green-200 rounded-md">
          <p className="text-green-800">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</p>
        </div>
      )}

      <div className="grid gap-6">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Store className="h-5 w-5" />
              –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </CardTitle>
            <CardDescription>
              –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="storeName">–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞</Label>
                <Input
                  id="storeName"
                  value={settings.storeName}
                  onChange={(e) => setSettings({ ...settings, storeName: e.target.value })}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞"
                />
              </div>
              <div>
                <Label htmlFor="storeEmail">Email –º–∞–≥–∞–∑–∏–Ω–∞</Label>
                <Input
                  id="storeEmail"
                  type="email"
                  value={settings.storeEmail}
                  onChange={(e) => setSettings({ ...settings, storeEmail: e.target.value })}
                  placeholder="info@example.com"
                />
              </div>
              <div>
                <Label htmlFor="storePhone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
                <Input
                  id="storePhone"
                  value={settings.storePhone}
                  onChange={(e) => setSettings({ ...settings, storePhone: e.target.value })}
                  placeholder="+7 (999) 123-45-67"
                />
              </div>
              <div>
                <Label htmlFor="storeWebsite">–í–µ–±-—Å–∞–π—Ç</Label>
                <Input
                  id="storeWebsite"
                  value={settings.storeWebsite}
                  onChange={(e) => setSettings({ ...settings, storeWebsite: e.target.value })}
                  placeholder="https://example.com"
                />
              </div>
            </div>
            <div>
              <Label htmlFor="storeDescription">–û–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞</Label>
              <Textarea
                id="storeDescription"
                value={settings.storeDescription}
                onChange={(e) => setSettings({ ...settings, storeDescription: e.target.value })}
                placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"
                rows={3}
              />
            </div>
            <div>
              <Label htmlFor="storeAddress">–ê–¥—Ä–µ—Å</Label>
              <Input
                id="storeAddress"
                value={settings.storeAddress}
                onChange={(e) => setSettings({ ...settings, storeAddress: e.target.value })}
                placeholder="–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞"
              />
            </div>
          </CardContent>
        </Card>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫–∞–∑–æ–≤ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <ShoppingCart className="h-5 w-5" />
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫–∞–∑–æ–≤
            </CardTitle>
            <CardDescription>
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <Label htmlFor="guestCheckout">–†–∞–∑—Ä–µ—à–∏—Ç—å –≥–æ—Å—Ç–µ–≤—ã–µ –∑–∞–∫–∞–∑—ã</Label>
                <p className="text-sm text-muted-foreground">
                  –ü–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                </p>
              </div>
              <Switch
                id="guestCheckout"
                checked={settings.allowGuestCheckout}
                onCheckedChange={(checked) => setSettings({ ...settings, allowGuestCheckout: checked })}
              />
            </div>
            <div className="flex items-center justify-between">
              <div>
                <Label htmlFor="emailConfirmation">–¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email</Label>
                <p className="text-sm text-muted-foreground">
                  –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ email –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞
                </p>
              </div>
              <Switch
                id="emailConfirmation"
                checked={settings.requireEmailConfirmation}
                onCheckedChange={(checked) => setSettings({ ...settings, requireEmailConfirmation: checked })}
              />
            </div>
            <div className="flex items-center justify-between">
              <div>
                <Label htmlFor="autoConfirm">–ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤</Label>
                <p className="text-sm text-muted-foreground">
                  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
                </p>
              </div>
              <Switch
                id="autoConfirm"
                checked={settings.autoConfirmOrders}
                onCheckedChange={(checked) => setSettings({ ...settings, autoConfirmOrders: checked })}
              />
            </div>
          </CardContent>
        </Card>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <CreditCard className="h-5 w-5" />
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
            </CardTitle>
            <CardDescription>
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <Label htmlFor="currency">–í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</Label>
                <select
                  id="currency"
                  value={settings.defaultCurrency}
                  onChange={(e) => setSettings({ ...settings, defaultCurrency: e.target.value })}
                  className="w-full p-2 border rounded-md"
                >
                  <option value="RUB">–†—É–±–ª—å (RUB)</option>
                  <option value="USD">–î–æ–ª–ª–∞—Ä (USD)</option>
                  <option value="EUR">–ï–≤—Ä–æ (EUR)</option>
                </select>
              </div>
              <div>
                <Label htmlFor="taxRate">–ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (%)</Label>
                <Input
                  id="taxRate"
                  type="number"
                  value={settings.taxRate}
                  onChange={(e) => setSettings({ ...settings, taxRate: parseFloat(e.target.value) || 0 })}
                  placeholder="20"
                />
              </div>
              <div>
                <Label htmlFor="freeShipping">–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç (‚ÇΩ)</Label>
                <Input
                  id="freeShipping"
                  type="number"
                  value={settings.freeShippingThreshold}
                  onChange={(e) => setSettings({ ...settings, freeShippingThreshold: parseFloat(e.target.value) || 0 })}
                  placeholder="5000"
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Truck className="h-5 w-5" />
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            </CardTitle>
            <CardDescription>
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="shippingMethod">–ú–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</Label>
                <select
                  id="shippingMethod"
                  value={settings.defaultShippingMethod}
                  onChange={(e) => setSettings({ ...settings, defaultShippingMethod: e.target.value })}
                  className="w-full p-2 border rounded-md"
                >
                  <option value="courier">–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</option>
                  <option value="pickup">–°–∞–º–æ–≤—ã–≤–æ–∑</option>
                  <option value="post">–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏</option>
                </select>
              </div>
              <div className="flex items-center justify-between">
                <div>
                  <Label htmlFor="allowPickup">–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–∞–º–æ–≤—ã–≤–æ–∑</Label>
                  <p className="text-sm text-muted-foreground">
                    –ü–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º –∑–∞–±–∏—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
                  </p>
                </div>
                <Switch
                  id="allowPickup"
                  checked={settings.allowPickup}
                  onCheckedChange={(checked) => setSettings({ ...settings, allowPickup: checked })}
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="h-5 w-5" />
              –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            </CardTitle>
            <CardDescription>
              –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <Label htmlFor="strongPasswords">–¢—Ä–µ–±–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏</Label>
                <p className="text-sm text-muted-foreground">
                  –ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã
                </p>
              </div>
              <Switch
                id="strongPasswords"
                checked={settings.requireStrongPasswords}
                onCheckedChange={(checked) => setSettings({ ...settings, requireStrongPasswords: checked })}
              />
            </div>
            <div className="flex items-center justify-between">
              <div>
                <Label htmlFor="twoFactor">–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</Label>
                <p className="text-sm text-muted-foreground">
                  –¢—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤—Ö–æ–¥–∞
                </p>
              </div>
              <Switch
                id="twoFactor"
                checked={settings.enableTwoFactorAuth}
                onCheckedChange={(checked) => setSettings({ ...settings, enableTwoFactorAuth: checked })}
              />
            </div>
            <div>
              <Label htmlFor="sessionTimeout">–¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏ (–º–∏–Ω—É—Ç—ã)</Label>
              <Input
                id="sessionTimeout"
                type="number"
                value={settings.sessionTimeout}
                onChange={(e) => setSettings({ ...settings, sessionTimeout: parseInt(e.target.value) || 30 })}
                placeholder="30"
              />
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
} 