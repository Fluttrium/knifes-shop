'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/hooks/use-auth';
import { useCart } from '@/hooks/use-cart';
import { api } from '@repo/api-client';
import type { Address } from '@repo/api-client';
import { Container } from '@/components/shared/container';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { ArrowLeft, MapPin, Plus, Trash2 } from 'lucide-react';
import Link from 'next/link';
import Image from 'next/image';

export default function CheckoutPage() {
  const router = useRouter();
  const { isAuthenticated, user } = useAuth();
  const { cart, loading: cartLoading } = useCart();
  
  const [addresses, setAddresses] = useState<Address[]>([]);
  const [selectedAddressId, setSelectedAddressId] = useState<string>('');
  const [notes, setNotes] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/signin');
      return;
    }

    if (cart && cart.items.length === 0) {
      router.push('/cart');
      return;
    }

    fetchAddresses();
  }, [isAuthenticated, cart, router]);

  const fetchAddresses = async () => {
    try {
      const response = await api.orders.getAddresses();
      setAddresses(response);
      
      // –í—ã–±–∏—Ä–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const defaultAddress = response.find(addr => addr.isDefault);
      if (defaultAddress) {
        setSelectedAddressId(defaultAddress.id);
      } else if (response.length > 0) {
        setSelectedAddressId(response[0]?.id || '');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥—Ä–µ—Å–æ–≤:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥—Ä–µ—Å–æ–≤');
    }
  };

  const handleCreateOrder = async () => {
    if (!selectedAddressId) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏–º–µ–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω
    const selectedAddress = addresses.find(addr => addr.id === selectedAddressId);
    if (!selectedAddress?.phone) {
      setError('–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–¥—Ä–µ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.');
      return;
    }

    setLoading(true);
    setError(null);

    try {
      if (!cart) {
        throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const orderData = {
        shippingAddressId: selectedAddressId,
        notes,
      };

      const order = await api.orders.createOrder(orderData);
      // Order created successfully

      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
      const paymentData = {
        orderId: order.id,
        amount: Number(order.totalAmount),
        currency: order.currency,
        description: `–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #${order.orderNumber}`,
      };

      const payment = await api.payments.createPayment(paymentData);
              // Payment created successfully

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
      if (payment.paymentUrl) {
        window.location.href = payment.paymentUrl;
      } else {
        router.push(`/orders/${order.id}`);
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setLoading(false);
    }
  };

  if (!isAuthenticated || cartLoading) {
    return (
      <Container>
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
        </div>
      </Container>
    );
  }

  if (!cart || cart.items.length === 0) {
    return (
      <Container>
        <div className="flex flex-col items-center justify-center min-h-[400px] space-y-4">
          <p className="text-muted-foreground">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
          <Link href="/">
            <Button>
              <ArrowLeft className="h-4 w-4 mr-2" />
              –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º
            </Button>
          </Link>
        </div>
      </Container>
    );
  }

  return (
    <Container>
      <div className="py-8">
        <div className="flex items-center justify-between mb-8">
          <h1 className="text-3xl font-bold">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>
          <Link href="/cart">
            <Button variant="outline">
              <ArrowLeft className="h-4 w-4 mr-2" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É
            </Button>
          </Link>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="lg:col-span-2 space-y-6">
            {/* –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <MapPin className="h-5 w-5 mr-2" />
                  –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
                </CardTitle>
              </CardHeader>
              <CardContent>
                {addresses.length === 0 ? (
                  <div className="text-center py-8">
                    <p className="text-muted-foreground mb-4">
                      –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
                    </p>
                    <Link href="/profile/addresses">
                      <Button>
                        <Plus className="h-4 w-4 mr-2" />
                        –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å
                      </Button>
                    </Link>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {addresses.map((address) => (
                      <div
                        key={address.id}
                        className={`border rounded-lg p-4 cursor-pointer transition-colors ${
                          selectedAddressId === address.id
                            ? 'border-primary bg-primary/5'
                            : 'border-border hover:border-primary/50'
                        } ${!address.phone ? 'border-red-200 bg-red-50' : ''}`}
                        onClick={() => setSelectedAddressId(address.id)}
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <div className="flex items-center gap-2 mb-2">
                              <span className="font-semibold">
                                {address.firstName} {address.lastName}
                              </span>
                              {address.isDefault && (
                                <Badge variant="secondary">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</Badge>
                              )}
                              {!address.phone && (
                                <Badge variant="destructive">–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞</Badge>
                              )}
                            </div>
                            <p className="text-sm text-muted-foreground">
                              {address.address1}
                              {address.address2 && `, ${address.address2}`}
                            </p>
                            <p className="text-sm text-muted-foreground">
                              {address.city}, {address.state} {address.postalCode}
                            </p>
                            <p className="text-sm text-muted-foreground">
                              {address.country}
                            </p>
                            {address.phone ? (
                              <p className="text-sm text-green-600 font-medium">
                                üìû {address.phone}
                              </p>
                            ) : (
                              <p className="text-sm text-red-600">
                                ‚ö†Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω
                              </p>
                            )}
                          </div>
                          <div className="ml-4">
                            <div className="w-4 h-4 rounded-full border-2 border-primary flex items-center justify-center">
                              {selectedAddressId === address.id && (
                                <div className="w-2 h-2 bg-primary rounded-full"></div>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>

            {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É */}
            <Card>
              <CardHeader>
                <CardTitle>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</CardTitle>
              </CardHeader>
              <CardContent>
                <Textarea
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  rows={3}
                />
              </CardContent>
            </Card>

            {/* –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ */}
            <Card>
              <CardHeader>
                <CardTitle>–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {cart.items.map((item) => {
                    const productImage = item.product.images.find(img => img.isPrimary) || item.product.images[0];
                    const variant = item.variant;
                    const price = Number(variant?.price || item.product.price);
                    
                    return (
                      <div key={item.id} className="flex items-center space-x-4">
                        <div className="relative w-16 h-16 flex-shrink-0">
                          {productImage ? (
                            <Image
                              src={productImage.url}
                              alt={productImage.alt || item.product.name}
                              fill
                              className="object-cover rounded-md"
                            />
                          ) : (
                            <div className="w-full h-full bg-muted rounded-md flex items-center justify-center">
                              <span className="text-muted-foreground text-xs">–ù–µ—Ç —Ñ–æ—Ç–æ</span>
                            </div>
                          )}
                        </div>
                        <div className="flex-1 min-w-0">
                          <h3 className="font-semibold truncate">
                            {item.product.name}
                          </h3>
                          {variant && (
                            <p className="text-sm text-muted-foreground">
                              –í–∞—Ä–∏–∞–Ω—Ç: {variant.name}
                            </p>
                          )}
                          <p className="text-sm text-muted-foreground">
                            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}
                          </p>
                        </div>
                        <div className="text-right">
                          <p className="font-semibold">
                            {(price * item.quantity).toLocaleString('ru-RU')} ‚ÇΩ
                          </p>
                          <p className="text-sm text-muted-foreground">
                            {price.toLocaleString('ru-RU')} ‚ÇΩ –∑–∞ —à—Ç.
                          </p>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* –ò—Ç–æ–≥–∏ –∑–∞–∫–∞–∑–∞ */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle>–ò—Ç–æ–≥–∏ –∑–∞–∫–∞–∑–∞</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex justify-between">
                  <span>–¢–æ–≤–∞—Ä–æ–≤:</span>
                  <span>{cart.totalItems} —à—Ç.</span>
                </div>
                <div className="flex justify-between">
                  <span>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤:</span>
                  <span>{Number(cart.totalPrice).toLocaleString('ru-RU')} ‚ÇΩ</span>
                </div>
                <div className="flex justify-between">
                  <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                  <span>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
                </div>
                <Separator />
                <div className="flex justify-between text-lg font-semibold">
                  <span>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</span>
                  <span>{Number(cart.totalPrice).toLocaleString('ru-RU')} ‚ÇΩ</span>
                </div>
                
                {error && (
                  <div className="text-sm text-destructive bg-destructive/10 p-3 rounded-md">
                    {error}
                  </div>
                )}

                <Button 
                  className="w-full" 
                  size="lg"
                  onClick={handleCreateOrder}
                  disabled={loading || !selectedAddressId}
                >
                  {loading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'}
                </Button>

                <p className="text-xs text-muted-foreground text-center">
                  –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑¬ª, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–∫—É–ø–∫–∏
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </Container>
  );
} 