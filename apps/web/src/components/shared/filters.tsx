'use client';

import React from 'react';
import { Title } from './title';
import { Input } from '../ui/input';
import { RangeSlider } from '../ui/range-slider';
import { CheckboxFiltersGroup } from './checkbox-filters-group';
import { useKnifeFilters } from '@/hooks/use-knife-filters';
import { useQueryFilters } from '@/hooks/use-query-filters';
import { Button } from '../ui/button';
import api from '@repo/api-client';

interface Props {
  className?: string;
}

interface FilterOptions {
  brands: Array<{ text: string; value: string }>;
  materials: Array<{ text: string; value: string }>;
  productTypes: Array<{ text: string; value: string }>;
  handleTypes: Array<{ text: string; value: string }>;
}

export const Filters: React.FC<Props> = ({ className }) => {
  const filters = useKnifeFilters(); // –ò—Å–ø—Ä–∞–≤–∏–ª —Å useKnifeSort –Ω–∞ useKnifeFilters
  useQueryFilters(filters);

  const [filterOptions, setFilterOptions] = React.useState<FilterOptions>({
    brands: [],
    materials: [],
    productTypes: [],
    handleTypes: []
  });
  const [loading, setLoading] = React.useState(true);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ API
  React.useEffect(() => {
    const fetchFilterOptions = async () => {
      try {
        setLoading(true);
        console.log('üîç Fetching filter options...');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const response = await api.products.getProducts({ limit: 1000 });
        const products = response.products;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
        const uniqueBrands = [...new Set(products.map(p => p.brand).filter(Boolean))]
          .map(brand => ({ text: brand!, value: brand! }))
          .sort((a, b) => a.text.localeCompare(b.text));

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        const uniqueMaterials = [...new Set(products.map(p => p.material).filter(Boolean))]
          .map(material => ({
            text: getMaterialDisplayName(material!),
            value: material!
          }))
          .sort((a, b) => a.text.localeCompare(b.text));

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
        const uniqueProductTypes = [...new Set(products.map(p => p.productType))]
          .map(type => ({
            text: getProductTypeDisplayName(type),
            value: type
          }))
          .sort((a, b) => a.text.localeCompare(b.text));

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Ä—É–∫–æ—è—Ç–æ–∫
        const uniqueHandleTypes = [...new Set(products.map(p => p.handleType).filter(Boolean))]
          .map(type => ({
            text: getHandleTypeDisplayName(type!),
            value: type!
          }))
          .sort((a, b) => a.text.localeCompare(b.text));

        setFilterOptions({
          brands: uniqueBrands,
          materials: uniqueMaterials,
          productTypes: uniqueProductTypes,
          handleTypes: uniqueHandleTypes
        });

        console.log('‚úÖ Loaded filter options:', {
          brands: uniqueBrands.length,
          materials: uniqueMaterials.length,
          productTypes: uniqueProductTypes.length,
          handleTypes: uniqueHandleTypes.length
        });

      } catch (error) {
        console.error('‚ùå Error fetching filter options:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchFilterOptions();
  }, []);

  const handlePriceChange = (values: [number, number]) => {
    const [priceFrom, priceTo] = values;
    filters.setPrices('priceFrom', priceFrom);
    filters.setPrices('priceTo', priceTo);
  };

  const currentPriceRange: [number, number] = [
    filters.prices.priceFrom || 0,
    filters.prices.priceTo || 50000,
  ];

  return (
    <div className={className}>
      <Title text="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è" size="sm" className="mb-5 font-bold" />

      {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ */}
      <Button
        onClick={filters.resetFilters}
        variant="outline"
        className="w-full mb-5"
      >
        –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
      </Button>

      {/* –¶–µ–Ω–∞ */}
      <div className="mt-5 border-y border-y-neutral-100 py-6 pb-7">
        <p className="font-bold mb-3">–¶–µ–Ω–∞ –æ—Ç –∏ –¥–æ:</p>
        <div className="flex gap-3 mb-5">
          <Input
            type="number"
            placeholder="0"
            min={0}
            max={50000}

          />
          <Input
            type="number"
            placeholder="50000"
            min={100}
            max={50000}
          />
        </div>
        <RangeSlider
          min={0}
          max={50000}
          step={100}
          value={currentPriceRange}
          onValueChange={handlePriceChange}
        />
      </div>

      {/* –ë—Ä–µ–Ω–¥—ã */}
      <CheckboxFiltersGroup
        title="–ë—Ä–µ–Ω–¥—ã"
        name="brands"
        className="mt-5"
        limit={6}
        loading={loading}
        defaultItems={filterOptions.brands}
        items={filterOptions.brands}
        selected={filters.brands}
        onClickCheckbox={filters.setBrands}
      />

      {/* –ú–∞—Ç–µ—Ä–∏–∞–ª—ã */}
      <CheckboxFiltersGroup
        title="–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"
        name="materials"
        className="mt-5"
        limit={5}
        loading={loading}
        defaultItems={filterOptions.materials}
        items={filterOptions.materials}
        selected={filters.materials}
        onClickCheckbox={filters.setMaterials}
      />

      {/* –¢–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ */}
      <CheckboxFiltersGroup
        title="–¢–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤"
        name="productTypes"
        className="mt-5"
        limit={5}
        loading={loading}
        defaultItems={filterOptions.productTypes}
        items={filterOptions.productTypes}
        selected={filters.productTypes}
        onClickCheckbox={filters.setProductTypes}
      />

      {/* –¢–∏–ø—ã —Ä—É–∫–æ—è—Ç–æ–∫ */}
      <CheckboxFiltersGroup
        title="–¢–∏–ø—ã —Ä—É–∫–æ—è—Ç–æ–∫"
        name="handleTypes"
        className="mt-5"
        limit={3}
        loading={loading}
        defaultItems={filterOptions.handleTypes}
        items={filterOptions.handleTypes}
        selected={filters.handleTypes}
        onClickCheckbox={filters.setHandleTypes}
      />
    </div>
  );
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è enum –∑–Ω–∞—á–µ–Ω–∏–π –≤ —á–∏—Ç–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
function getMaterialDisplayName(material: string): string {
  const materialNames: Record<string, string> = {
    stainless_steel: '–ù–µ—Ä–∂–∞–≤–µ—é—â–∞—è —Å—Ç–∞–ª—å',
    carbon_steel: '–£–≥–ª–µ—Ä–æ–¥–∏—Å—Ç–∞—è —Å—Ç–∞–ª—å',
    damascus_steel: '–î–∞–º–∞—Å—Å–∫–∞—è —Å—Ç–∞–ª—å',
    ceramic: '–ö–µ—Ä–∞–º–∏–∫–∞',
    titanium: '–¢–∏—Ç–∞–Ω',
    wood: '–î–µ—Ä–µ–≤–æ',
    plastic: '–ü–ª–∞—Å—Ç–∏–∫',
    leather: '–ö–æ–∂–∞',
    synthetic: '–°–∏–Ω—Ç–µ—Ç–∏–∫–∞'
  };
  return materialNames[material] || material;
}

function getProductTypeDisplayName(type: string): string {
  const typeNames: Record<string, string> = {
    knife: '–ù–æ–∂–∏',
    sharpener: '–¢–æ—á–∏–ª–∫–∏',
    sheath: '–ù–æ–∂–Ω—ã',
    accessory: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã',
    gift_set: '–ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –Ω–∞–±–æ—Ä—ã'
  };
  return typeNames[type] || type;
}

function getHandleTypeDisplayName(type: string): string {
  const typeNames: Record<string, string> = {
    fixed: '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ',
    folding: '–°–∫–ª–∞–¥–Ω—ã–µ',
    multi_tool: '–ú—É–ª—å—Ç–∏—Ç—É–ª'
  };
  return typeNames[type] || type;
}